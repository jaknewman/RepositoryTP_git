# -*- coding: utf-8 -*-
"""Euromillions_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a2suV6kS6segs7ykOTnl_SiJnTtlrFiL
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
df = pd.read_html("https://www.fdj.fr/jeux-de-tirage/euromillions-my-million/statistiques")
numeros = df[0]

numeros.drop([50], axis=0, inplace=True)
numeros['% de sorties*'] = numeros['% de sorties*'].astype(float) / 100
numeros[['Numéros', 'Nombre de sorties']] = numeros[['Numéros', 'Nombre de sorties']].astype(int)
numeros

# Plot 1

df_2 = pd.read_html("https://www.fdj.fr/jeux-de-tirage/euromillions-my-million/statistiques")
etoiles = df_2[1][0:12]

etoiles['% de sorties*'] = etoiles['% de sorties*'].astype(float) / 100
etoiles[['Numéros', 'Nombre de sorties']] = etoiles[['Numéros', 'Nombre de sorties']].astype(int)
etoiles

# Plot 2

import random
import numpy as np

# Probabilités historiques pour chaque nombre
prob_numeros = numeros['% de sorties*'] / 100

prob_etoiles = etoiles['% de sorties*'] / 100

# Somme des probabilités pour le lot 1
sum_prob_numeros = sum(prob_numeros)

# Somme des probabilités our le lot 2
sum_prob_etoiles = sum(prob_etoiles)

# Normalisation des probabilités pour le lot 1
prob_numeros_norm = [p/sum_prob_numeros for p in prob_numeros]

# Normalisation des probabilités pour le lot 2
prob_etoiles_norm = [p/sum_prob_etoiles for p in prob_etoiles]

# Tirage sans remise de 5 nombres dans le lot 1
tirage_numeros = list(np.random.choice(range(1, 51), size=5, p=prob_numeros_norm, replace=False))

# Tirage sans remise de 2 nombres dans le lot 2
tirage_etoiles = list(np.random.choice(range(1, 13), size=2, p=prob_etoiles_norm, replace=False))

# Concaténation des résultats des deux lots
resultat = tirage_numeros + tirage_etoiles

print("Tirage :", resultat)

# Effectuer 100 tirages successifs
results = []
for i in range(100):
    # Tirage sans remise de 5 nombres dans le lot 1
    lot1 = np.random.choice(range(1, 51), size=5, p=prob_numeros_norm, replace=False)

    # Tirage sans remise de 2 nombres dans le lot 2
    lot2 = np.random.choice(range(1, 13), size=2, p=prob_etoiles_norm, replace=False)

    # Concaténation des résultats des deux lots
    Resultat = list(lot1) + list(lot2)
    results.append(Resultat)

results

from collections import Counter

# Compter les occurrences de chaque valeur dans results
occurrences = Counter([value for sublist in results for value in sublist])

# Obtenir les 7 valeurs les plus présentes
top_values = occurrences.most_common(7)

# Afficher les 7 valeurs les plus présentes
for value, count in top_values:
    print(f"{value}: {count} occurrences")